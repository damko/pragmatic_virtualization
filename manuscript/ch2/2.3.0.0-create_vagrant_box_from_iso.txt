{pagebreak}

## Create a Vagrant template box from iso file

Checkout the _create_vagrant_box_from_iso_ branch from the _extra_ repository

{linenos=off, lang=bash}
~~~~~~~
cd $pve
git checkout create_vagrant_box_from_iso
cd packer-templates
~~~~~~~

You'll be following these steps:

1. creation of a box using Packer and starting from a Debian iso installer
2. importation of the Packer box in Vagrant as template box
3. creation, setup and configuration of a Vagrant virtual machine

### Step 1: Creation of a box with Packer

Packer will download a net-install iso from the Debian servers and will use it to launch the installation process and create a virtual machine image compatible with VirtualBox and Vagrant.

Basically Packer will what you would do when you manually install Debian from a net-install cd and will adjust it for the virtualization environment.

{linenos=off, lang=bash}
~~~~~~~
cd $pve/packer-templates
tree
.
├── http
│   └── preseed.cfg
├── LICENCE
├── README.md
├── scripts
│   ├── base.sh
│   ├── cleanup.sh
│   ├── vagrant.sh
│   └── virtualbox.sh
└── ta-debian-8-jessie-virtualbox.json
~~~~~~~

The `ta-debian-8-jessie-virtualbox.json` file contains all the options to pass to the Debian installer to perfom an unattended installation.

If you have a look at it you see that the Packer box is configured to have 1 core, 512MB ram and 10Gb hdd. That's enough for now: later on you will see how easy it is to add a core or some ram.

Before creating the vm, check if the json file is valid:

{linenos=off, lang=bash}
~~~~~~~
cd $pve/packer-templates
packer validate ta-debian-8-jessie-virtualbox.json
~~~~~~~

This should output _Template validated successfully_

Finally, this is the command to create the fresh vm:

{linenos=off, lang=bash}
~~~~~~~
cd $pve/packer-templates
packer build ta-debian-8-jessie-virtualbox.json
~~~~~~~

This last command will launch a VirtualBox window and you will be able to see the Debian installation running unattended.

You are not supposed to interact with the installation window unless you see the process stuck on a dialog window for long time and asking for user input.

When the installation process ends (it will take a while) you will see this message in the terminal:

{linenos=off, lang=text}
~~~~~~~
==> Builds finished. The artifacts of successful builds are:
--> virtualbox-iso: 'virtualbox' provider box: debian-800-jessie.box
~~~~~~~

_debian-800-jessie.box_ is a file about 829MB big which lives inside the packer-templates directory and contains the fresh virtual machine.

{pagebreak}

### Step 2: Import the Packer box in Vagrant

Now that the debian-800-jessie.box file is ready, the next step is to tell Vagrant to import the Packer box and to make it available in the system as a template:

{linenos=off, lang=bash}
~~~~~~~
cd $pve/packer-templates
vagrant box add debian_jessie_800_64bit ./debian-800-jessie.box
~~~~~~~

which will output something like:

{linenos=off, lang=bash}
~~~~~~~
==> box: Adding box 'debian_jessie_800_64bit' (v0) for provider: 
    box: Downloading: file:///[...]/packer-templates/debian-800-jessie.box
==> box: Successfully added box 'debian_jessie_800_64bit' (v0) for 'virtualbox'!
~~~~~~~

_debian_jessie_800_64bit_ will be the name of the Vagrant template and it must be unique in the system. Imagine this Vagrant box as a _template_ for a fresh Debian Jessie 64bit based virtual machine that can be used to create as many Vagrant boxes as you want.

From this moment you will need to use Packer again only if you want to create a template virtual machine based on a distribution different from Debian Jessie 8.0 64 bit.

T> If you like you can now delete the _debian-800-jessie.box_ file.

### Step 3: Creation and configuration of a Vagrant vm

Finally it's time to create the development environment virtual machine called _ariadne-dev_.

{linenos=off, lang=bash}
~~~~~~~
cd $pve/ariadne/orchestration/vagrant/
~~~~~~~

The _Vagrantfile_ contained in this directory is already configured and, for now, it looks like this:

{linenos=on, lang=text}
~~~~~~~
VAGRANTFILE_API_VERSION = "2"

############################################################
# VARIABLES

# Vagrant template box name
VG_BOX_NAME = "debian_jessie_800_64bit"

# Local virtual machine for development
VB_DEV_VM_NAME = "ariadne-dev"

############################################################

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

    # Vagrant settings for the development vm
    config.vm.define VB_DEV_VM_NAME, primary: true do |devel|

        # Vagrant box name. This the Vagrant template (created by Packer)
        # from which the vagrant virtual machine will be generated
        devel.vm.box = VG_BOX_NAME

        # Hostname for the generated Vagrant vm
        devel.vm.hostname = VB_DEV_VM_NAME

        # Folder sharing is now disabled
        devel.vm.synced_folder  ".", "/projects", disabled: true

        # VirtualBox settings
        devel.vm.provider "virtualbox" do |vb|
            vb.name = VB_DEV_VM_NAME

            # If true it does not boot in headless mode => shows virtualbox UI.
            # Uncomment only for troubleshooting.
            #vb.gui = true

            # Uses VBoxManage to customize the VM
            vb.customize ["modifyvm", :id, "--memory", "512"]
            vb.customize ["modifyvm", :id, "--cpus", "1"]
            vb.customize ["modifyvm", :id, "--ioapic", "on"]
        end
    end

end
~~~~~~~

The Vagrantfile contains all the needed instructions that Vagrant needs to build the new vm. Soon it will be also used to describe also the production virtual machine.

Everything is ready to launch the creation of the virtual machine (which will take a couple of minutes) with the command:

{linenos=off, lang=bash}
~~~~~~~
cd $pve/ariadne/orchestration/vagrant
vagrant up
~~~~~~~

See what's happening:

1. Vagrant clones the VirtualBox template box into a VirtualBox virtual machine
2. Vagrant arranges some changes to the virtual machine accordingly to what set in the Vagrantfile (like the number of cores, the amount of ram, the network card MAC address, the hostname etc.)
3. Vagrant starts the virtual machine

Output:

{linenos=off, lang=text}
~~~~~~~
Bringing machine 'ariadne-dev' up with 'virtualbox' provider...
==> ariadne-dev: Clearing any previously set forwarded ports...
==> ariadne-dev: Clearing any previously set network interfaces...
==> ariadne-dev: Preparing network interfaces based on configuration...
    ariadne-dev: Adapter 1: nat
==> ariadne-dev: Forwarding ports...
    ariadne-dev: 22 => 2222 (adapter 1)
==> ariadne-dev: Running 'pre-boot' VM customizations...
==> ariadne-dev: Booting VM...
==> ariadne-dev: Waiting for machine to boot. This may take a few minutes...
    ariadne-dev: SSH address: 127.0.0.1:2222
    ariadne-dev: SSH username: vagrant
    ariadne-dev: SSH auth method: private key
    ariadne-dev: Warning: Connection timeout. Retrying...
    ariadne-dev: 
    ariadne-dev: Vagrant insecure key detected. Vagrant will automatically replace
    ariadne-dev: this with a newly generated keypair for better security.
    ariadne-dev: 
    ariadne-dev: Inserting generated public key within guest...
    ariadne-dev: Removing insecure key from the guest if its present...
    ariadne-dev: Key inserted! Disconnecting and reconnecting using new SSH key...
==> ariadne-dev: Machine booted and ready!
~~~~~~~

After this you will eventually see some downloads starting and VirtualBox Guest Additions being updated but it will completely automatic.

Anyway the virtual machine is ready and running.

You can now login in the virtual machine via ssh with:

{linenos=off, lang=bash}
~~~~~~~
cd $pve/ariadne/orchestration/vagrant
vagrant ssh
~~~~~~~