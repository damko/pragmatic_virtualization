## Create a Vagrant Template box from iso file

Checkout the _create_vagrant_box_from_iso_ branch of the _extra_ repository

    cd $pve
    git checkout create_vagrant_box_from_iso
    cd packer-templates

You'll be following these steps:

1. creation of a box using Packer starting from a Debian iso installer
1. import of the Packer box in Vagrant as template box
1. creation, setup and configuration of a Vagrant virtual machine

### Creation of a box using Packer - 1st step

Packer will download a net-install iso from the Debian servers and will use that iso to launch the installation process and create a virtual machine image compatible with Virtualbox and Vagrant.

Basically Packer will do what you do when you install Debian from a net-install cd and will adjust it for the virtualization environment.

#### Get the Packer scripts

    cd $pve/packer_templates
    tree
    .
    ├── http
    │   └── preseed.cfg
    ├── LICENCE
    ├── README.md
    ├── scripts
    │   ├── base.sh
    │   ├── cleanup.sh
    │   ├── vagrant.sh
    │   └── virtualbox.sh
    └── ta-debian-7-wheezy-virtualbox.json

If you have a look at the `ta-debian-7-wheezy-virtualbox.json` file you'll see that the Packer box is configured to have 1 core, 512MB ram and 10Gb hdd but it's easy to add a core or some ram later on.

Before creating the vm, check if the json file is valid:

    cd $pve/packer_templates
    packer validate ta-debian-7-wheezy-virtualbox.json

It should output "Template validated successfully."

Finally this is the command to create the fresh vm:

    cd $pve/packer_templates
    packer build ta-debian-7-wheezy-virtualbox.json

The command will take a while (~ 30 minutes) because of the download and the non-attended installation of the operating system but in the end it will show this message:

    ==> Builds finished. The artifacts of successful builds are:
    --> virtualbox-iso: 'virtualbox' provider box: debian-770-wheezy.box

_debian-770-wheezy.box_ is a file about 450MB big which lives inside the packer_template directory and contains the fresh virtual machine.

*Notes*:

1. The debian iso file name contains the version number and, as soon as new releases will be out and the 770 will be removed from the debian servers, the debian-770-wheezy.json file will be outdated and you'll get the "ISO download failed" error right after running the build command.
To fix the issue go on http://cdimage.debian.org/debian-cd/current/amd64/iso-cd/, check which is the latest net-inst version and copy its checksum from the MD5SUMS file. Then edit the .json file and update these variables at the top:

    * "iso_url": update the link to the iso file
    * "iso_md5": insert the new MD5 checksum
    * "vm_name": update the version

1. During the build process it is possible that the output will pause for quite a long time ( 5 minutes or so ) at the line _Waiting for SSH to become available..._. Don't quit the process and be patient.

1. If you are curious to see what happens during the non-attended installation of the operating system you can edit the ta-debian-7-wheezy-virtualbox.json file and change `"headless": true,` to `"headless": false,` and re-run the build process.


### Import of the Packer box into Vagrant and Virtualbox - 2nd step

Now that the debian-770-wheezy.box file is ready, the next step is to tell Vagrant to import the Packer box and to make it available in the system as a template. This command will do the trick:

    cd $pve/packer_templates
    vagrant box add debian_wheezy_770_64bit ./debian-770-wheezy.box

_debian_wheezy_770_64bit_ will be the name of the Vagrant template and must be unique in the system. Imagine this Vagrant box as a "template" for a fresh Debian Wheezy 64bit based virtual machine that can be used to create as many Vagrant boxes as you want.

If you want, now you can delete the _debian-770-wheezy.box_ file.


### Creation, setup and configuration of a Vagrant vm - 3rd step

Finally it's time to create the development environment vm called _ariadne-dev_.

    cd $pve/ariadne/orchestration/vagrant/

The _Vagrantfile_ contained in this directory is already configured and, for now, it looks like this:

    VAGRANTFILE_API_VERSION = "2"



    ############################################################
    # VARIABLES

    # Vagrant template box name
    VG_BOX_NAME = "debian_wheezy_770_64bit"

    # Local virtual machine for development
    VB_DEV_VM_NAME = "ariadne-dev"

    ############################################################



    Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

        # Vagrant settings for the development vm
        config.vm.define VB_DEV_VM_NAME, primary: true do |devel|

            # Vagrant box name. This the Vagrant template (created by Packer) from which the vagrant vm will be generated
            devel.vm.box = VG_BOX_NAME

            # Hostname for the generated Vagrant vm
            devel.vm.hostname = VB_DEV_VM_NAME

            # Folder sharing is now disabled
            devel.vm.synced_folder  ".", "/projects", disabled: true

            # Virtualbox settings
            devel.vm.provider "virtualbox" do |vb|
                vb.name = VB_DEV_VM_NAME

                ## If true it does not boot in headless mode => shows virtualbox UI. Uncomment only for troubleshooting.
                #vb.gui = true

                # Uses VBoxManage to customize the VM
                vb.customize ["modifyvm", :id, "--memory", "512"]
                vb.customize ["modifyvm", :id, "--cpus", "1"]
                vb.customize ["modifyvm", :id, "--ioapic", "on"]
            end
        end

    end


 It contains all the needed instructions for Vagrant to build the new vm and soon it will be used to describe also the production virtual machine, all in the same file.


Everything is ready to launch the creation of the vm (which will take a couple of minutes) with the command:

    cd $pve/ariadne/orchestration/vagrant
    vagrant up

See what's happening:

1. Vagrant clones the template box into a Virtualbox vm
1. Vagrant arranges some changes to the vm, like the number of cores, the amount of ram, the network card MAC address, the hostname etc. accordingly to what set in the Vagrantfile
1. Vagrant starts the vm

Output:

    Bringing machine 'ariadne-dev' up with 'virtualbox' provider...
    ==> ariadne-dev: Importing base box 'debian_wheezy_770_64bit'...
    ==> ariadne-dev: Matching MAC address for NAT networking...
    ==> ariadne-dev: Setting the name of the VM: ariadne-dev
    ==> ariadne-dev: Clearing any previously set network interfaces...
    ==> ariadne-dev: Preparing network interfaces based on configuration...
        ariadne-dev: Adapter 1: nat
    ==> ariadne-dev: Forwarding ports...
        ariadne-dev: 22 => 2222 (adapter 1)
    ==> ariadne-dev: Running 'pre-boot' VM customizations...
    ==> ariadne-dev: Booting VM...
    ==> ariadne-dev: Waiting for machine to boot. This may take a few minutes...
        ariadne-dev: SSH address: 127.0.0.1:2222
        ariadne-dev: SSH username: vagrant
        ariadne-dev: SSH auth method: private key
        ariadne-dev: Warning: Connection timeout. Retrying...
    ==> ariadne-dev: Machine booted and ready!
    GuestAdditions 4.3.16 running --- OK.
    ==> ariadne-dev: Checking for guest additions in VM...
    ==> ariadne-dev: Setting hostname...
    ==> ariadne-dev: Mounting shared folders...
        ariadne-dev: /vagrant => /home/damko/projects/pragmatic_virtualization_extra/ariadne/orchestration/vagrant


That's it. The virtual machine is ready and running.

You can now login via ssh with:

    cd $pve/ariadne/orchestration/vagrant
    vagrant ssh
