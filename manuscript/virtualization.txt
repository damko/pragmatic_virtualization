## What's virtualization

The term _Virtualization_ refers to the act of creating a virtual version of something, including but not limited to a virtual computer hardware platform, operating system, storage device, or computer network resources. [Wikipedia](https://en.wikipedia.org/wiki/Virtualization)

Basically with virtualization you can run virtual computers inside your own computer.

In this manual "_virtualization_" means "_hardware virtualization_"  which is the creation of a virtual machine that acts like a real computer with its own operating system. The software executed on virtual machines is separated from the underlying hardware resources and the whole virtual machine is stored in a few files located on the host system hard-drive.

## Why to use the virtualization

A common good practice during the development of a web application is to produce separated environments at least for the development and the production.

The development environment is the environment used by the developer to create and test a web application while the production environment is the server on which the final web application is hosted and published.

In this case "environment" means pretty much everything:

* the operating system in use
* the software and services installed in the system and their versions
* the libraries used in the web application and their versions

Running a web application on different environments, in development and production, can lead to strange bugs popping up when you go live.

Virtualization is the answer to the problem of inhomogeneous environments.

Especially when working in a team, virtualization offers other great benefits:

* all the team members can work in the same exact environment even when the team mates are in different locations
* any change to the environment can be easily spread to the team members virtual machines
* sharing different and multiple environments or environment updates among team mates is a matter of sharing a few configuration files

Virtualization also grants **isolation**: each project can be run in isolation inside its own virtual machine and the developer's workstation is totally decoupled from the projects. This helps to have a slim workstation and avoid conflicts in software versions.
To clarify consider this case: you have the application A requiring PHP 5.3 and the application B requiring PHP 5.6. Installing PHP 5.3 and 5.6 at the same time on your workstation is not easy. With virtualization you can set up two different virtual machines each one with a different PHP version.

## Virtualization tools

The most famous virtualization environments are [VirtualBox](http://www.virtualbox.org/), [VMware](http://www.vmware.com/) and [Docker](http://www.docker.com/) but this manual will focus only on VirtualBox.

VirtualBox and two other applications called Vagrant and Packer provide what's necessary to create, clone, run and destroy your virtual machines (aka. boxes or vm/vms) in an easy and very predictable way.

In a while your workstation will have a VirtualBox virtual machine managed by Vagrant that you can use as *development environment* for your applications.

Your applications code will be stored on your workstation filesystem and you will edit it locally using an editor installed on your workstation.

The applications code will be run by the virtual machine and this explains why you don't need to install services like Apache or Mysql on your workstation: they will run on the virtual machine.

## VirtualBox

VirtualBox offers "full virtualization" which is a particular kind of virtualization that allows an unmodified operating system with all of its installed software to run in a special environment, on top of your existing operating system. Your existing operating system is called _host_ while the virtual machines are called _guests_.
This approach, often called "native virtualization", is different from mere emulation which is typically quite slow.

VirtualBox is also different from the so-called "paravirtualization" solutions (such as Xen) which require the guest operating system to be modified.

### VirtualBox installation

Download from [here](https://www.virtualbox.org/wiki/Linux_Downloads) the latest package that suits at best your workstation.

Ex.:

    cd /tmp
    wget -c http://download.virtualbox.org/virtualbox/4.3.18/virtualbox-4.3_4.3.18-96516~Ubuntu~raring_amd64.deb
    sudo dpkg -i virtualbox-4.3_4.3.18-96516~Ubuntu~raring_amd64.deb

## Vagrant

[Vagrant](http://vagrantup.com/), created by [Mitchell Hashimoto](http://mitchellh.com/), helps you building your virtual boxes on top of VirtualBox (or VMWare etc.). Vagrant is considered as a wrapper for VirtualBox and it will configure the virtual machine(s) using a single configuration file named Vagrantfile.

Vagrant also creates a directory to share your code between your host and your virtual machine so that you can create and edit your files on your host machine and then run the code inside your virtual machine.

### Vagrant installation

Download from [here](http://www.vagrantup.com/downloads.html) the latest package that suits at best your workstation and then install it like this:

Ex.:

    cd /tmp
    wget -c https://dl.bintray.com/mitchellh/vagrant/vagrant_1.5.4_x86_64.deb
    sudo dpkg -i vagrant_1.5.4_x86_64.deb

Be sure that you are installing a Vagrant version > 1.5

## Packer

[Packer](http://packer.io), created by [Mitchell Hashimoto](http://mitchellh.com/), is a tool for creating identical machine images for multiple platforms from a single source configuration. Packer automates the creation of any type of machine image: out of the box Packer comes with support to build images for Amazon EC2, DigitalOcean, Google Compute Engine, QEMU, VirtualBox, VMware, and more.

This means that with Packer you write some configuration files (in json format) and then you can programmatically create the same virtual machine for different environments like VirtualBox, Vmware etc.

In this manual Packer will be used to create a Debian based virtual machine for VirtualBox which will be then used by Vagrant as a "template" virtual machine for the creation of your environments. The customization of each environment (Vagrant virtual machine) will be done using an automation tool called Ansible (see later).

### Packer installation

Differently from Vagrant and VirtualBox, Packer doesn't come with a debian installer so the easiest way to install it in the system is to run the `install_packer.sh` script  provided in the manual extra.

Checkout the _installing_tools_ branch from the _extra_ repository

    cd $pve
    git checkout installing_tools

Edit the script before running it and change the variables listed at the top accordingly to your needs.

    # environment variables: set here your preferences
    tmp_dir='/tmp' # default '/tmp"
    system='linux' # default 'linux'
    architecture='amd64' # either 'amd64' or '386'
    parent_dir='/home/damko/applications' # whatever you like
    packer_dir='packer' # default 'packer'
    packer_version='0.7.2' # default '0.5.2' @2014-04-20
    bashrc_file='/home/damko/.bashrc_custom' # default $HOME'/.bashrc'

The _parent_dir_ and the _bashrc_file_ parameters and _packer_version_ are the parameters you should take care of the most.
_parent_dir_ sets where you want to have it installed. I prefer to install it in my home directory. You can put any valid path
_bashrc_file_ sets which is the bash file in which the PATH variable should be altered so that your bash can find the Packer executable when you open a terminal
_packer_version_ this should be the latest packer version. You need to check in on the [Packer website](https://packer.io/downloads.html).

Run the installation:

    cd $pve
    ./bin/install_packer.sh

T> It's very important that you always have the latest version of all the software listed above otherwise you can experience misbehaviors. For this reason I don't suggest to use distribution based packages but to download the code directly from the official websites.
